/* tslint:disable */
// @ts-nocheck
const { writeFile, existsSync, mkdirSync } = require('fs');
const { argv } = require('yargs');

require('dotenv').config(); // read the env variables from .env file
const environment = argv.environment; // read the command line arguments passed with yargs

// write the content to the respective file;
// create a file if no file exists
function writeFileUsingFS(targetPath, environmentFileContent) {
  writeFile(targetPath, environmentFileContent, function (err) {
    if (err) {
      console.log(err);
    }
    if (environmentFileContent !== "") {
      console.log(`wrote variables to ${targetPath}`);
    }
  });
};

// Setting up the environment directory and default files for deployment
const envDirectory = './src/environments';

if (!existsSync(envDirectory)) {
  mkdirSync(envDirectory); // creates a directory if it does not exists
};
writeFileUsingFS('./src/environments/environment.prod.ts', ''); //creating environment.prod.ts file
writeFileUsingFS('./src/environments/environment.ts', '');//creating environment.ts file


// generating actual content to be dynamically added to the respective environment files
const isProduction = environment === 'prod'; // as `--environment=prod` option provided
const targetPath = isProduction
  ? './src/environments/environment.prod.ts'
  : './src/environments/environment.ts'; // choose targetPath based on environment
const environmentFileContent = `
  // This file was autogenerated by dynamically running setEnv.ts and using dotenv for managing API key secrecy

  export const environment = {
    production: ${isProduction},
    FIREBASE_API_KEY: '${process.env.FIREBASE_API_KEY}'
  };
`; //content to be compiled dynamically and pasted into respective environment files

writeFileUsingFS(targetPath, environmentFileContent); // appending data

/* tslint:enable */
